@model OnlineShop.Models.AddressModel
@{
    ViewBag.Title = "BillingAddress";
    Layout = "~/Views/Shared/_Layout.cshtml";
    decimal Total = 0;
    if (Session[OnlineShop.Common.CommonConstants.USER_SESSION] != null)
    {
        var customerSession = (OnlineShop.Common.UserLogin)Session[OnlineShop.Common.CommonConstants.USER_SESSION];
        var customer = new Models.Dao.CustomerDao().GetCustomerById(Convert.ToInt32(customerSession.UserId));
    }
    else
    {
        var shoppingCart = Session[OnlineShop.Common.CommonConstants.ShoppingCartSession];
        var listShoppingCart = new List<OnlineShop.Models.ShoppingCartItemModel>();
        if (shoppingCart != null)
        {
            listShoppingCart = (List<OnlineShop.Models.ShoppingCartItemModel>)shoppingCart;
        }
    }
}

<div class="master-wrapper-content">
    <div class="ajaxCartInfo" data-getajaxcartbuttonurl="/NopAjaxCart/GetAjaxCartButtonsAjax" data-productpageaddtocartbuttonselector=".add-to-cart-button" data-productboxaddtocartbuttonselector=".product-box-add-to-cart-button" data-productboxproductitemelementselector=".product-item" data-usenopnotification="False" data-nopnotificationresource="The product has been added to your <a href=&quot;/cart&quot;>shopping cart</a>" data-enableonproductpage="True" data-enableoncatalogpages="True" data-minishoppingcartquatityformattingresource="{0}" data-miniwishlistquatityformattingresource="{0}" data-addtowishlistbuttonselector=".add-to-wishlist-button">
    </div>
    <input id="addProductVariantToCartUrl" name="addProductVariantToCartUrl" type="hidden" value="/AddProductFromProductDetailsPageToCartAjax">
    <input id="addProductToCartUrl" name="addProductToCartUrl" type="hidden" value="/AddProductToCartAjax">
    <input id="miniShoppingCartUrl" name="miniShoppingCartUrl" type="hidden" value="/MiniShoppingCart">
    <input id="flyoutShoppingCartUrl" name="flyoutShoppingCartUrl" type="hidden" value="/NopAjaxCartFlyoutShoppingCart">
    <input id="checkProductAttributesUrl" name="checkProductAttributesUrl" type="hidden" value="/CheckIfProductOrItsAssociatedProductsHasAttributes">
    <input id="getMiniProductDetailsViewUrl" name="getMiniProductDetailsViewUrl" type="hidden" value="/GetMiniProductDetailsView">
    <input id="flyoutShoppingCartPanelSelector" name="flyoutShoppingCartPanelSelector" type="hidden" value="#flyout-cart">
    <input id="shoppingCartMenuLinkSelector" name="shoppingCartMenuLinkSelector" type="hidden" value=".cart-qty">
    <input id="wishlistMenuLinkSelector" name="wishlistMenuLinkSelector" type="hidden" value="span.wishlist-qty">
    <div id="product-ribbon-info" data-productid="0" data-productboxselector=".product-item, .item-holder" data-productboxpicturecontainerselector=".picture, .item-picture" data-productpagepicturesparentcontainerselector=".product-essential" data-productpagebugpicturecontainerselector=".picture" data-retrieveproductribbonsurl="/RetrieveProductRibbons">
    </div>
    <div class="quickViewData" data-productselector=".product-item" data-productselectorchild=".btn-wrapper" data-retrievequickviewurl="/quickviewdata" data-quickviewbuttontext="Quick View" data-quickviewbuttontitle="Quick View" data-isquickviewpopupdraggable="True" data-enablequickviewpopupoverlay="True" data-accordionpanelsheightstyle="content" data-getquickviewbuttonroute="/getquickviewbutton">
    </div>
    <div class="master-column-wrapper">
        <div class="center-1">
            <div class="page checkout-page billing-address-page">
                <div class="order-progress">
                    <ul>
                        <li class="active-step">
                            <a href="/cart"><span>Cart</span></a>
                        </li>
                        <li class="active-step last">
                            <a href="/checkout/billingaddress"><span>Address</span></a>
                        </li>
                        <li class="inactive-step">
                            <a><span>Shipping</span></a>
                        </li>
                        <li class="inactive-step">
                            <a><span>Payment</span></a>
                        </li>
                        <li class="inactive-step">
                            <a><span>Confirm</span></a>
                        </li>
                        <li class="inactive-step">
                            <a><span>Complete</span></a>
                        </li>
                    </ul>
                </div>
                <div class="page-title">
                    <h1>Billing address</h1>
                </div>
                <div class="page-body checkout-data">
                    @using (@Html.BeginForm("BillingAddress", "Checkout", FormMethod.Post))
                    {
                        <div class="billing-addresses">
                            <div class="section ship-to-same-address">
                                <div class="selector">
                                    <input type="checkbox" checked="checked" data-val="true" data-val-required="The ShipToSameAddress field is required." id="ShipToSameAddress" name="ShipToSameAddress" value="true">
                                    <label for="ShipToSameAddress">Ship to the same address</label>
                                </div>
                            </div>
                            <div class="section select-billing-address">
                                <div class="title">
                                    <strong>Select billing address</strong>
                                </div>
                                <div class="address-grid">
                                    @if (Session[OnlineShop.Common.CommonConstants.USER_SESSION] != null)
                                    {
                                        var customerSession = (OnlineShop.Common.UserLogin)Session[OnlineShop.Common.CommonConstants.USER_SESSION];
                                        var customer = new Models.Dao.CustomerDao().GetCustomerById(Convert.ToInt32(customerSession.UserId));
                                        foreach (var item in customer.Addresses)
                                        {
                                            <div class="address-item">
                                                <ul class="address-box">
                                                    <li class="name">
                                                        @item.FirstName @item.LastName
                                                    </li>
                                                    <li class="email">
                                                        <label>Email:</label>
                                                        <span>@item.Email</span>
                                                    </li>
                                                    <li class="phone">
                                                        <label>Phone number:</label>
                                                        <span>@item.PhoneNumber</span>
                                                    </li>
                                                    <li class="fax">
                                                        <label>Fax number:</label>
                                                        <span>@item.FaxNumber</span>
                                                    </li>
                                                    <li class="company">
                                                        @item.Company
                                                    </li>
                                                    <li class="address1">
                                                        @item.Address1
                                                    </li>
                                                    <li class="address2">
                                                        @item.Address2
                                                    </li>
                                                    <li class="city-state-zip">
                                                        @item.City,@item.ZipPostalCode
                                                    </li>
                                                </ul>
                                                <div class="select-button">
                                                    <input type="button" value="Bill to this address" class="button-1 select-billing-address-button valid" onclick="selectBillingAddress@(item.Id)()" aria-invalid="false">
                                                    <script type="text/javascript" asp-location="Footer">
function selectBillingAddress@(item.Id)() {
        $.ajax({
            cache: false,
            url: "/CheckOut/SelectBillingAddress",
            data: {
                addressId: @item.Id,
                shipToSameAddress: $('#ShipToSameAddress').is(':checked'),
            },
            type: 'POST',
            success: function (res) {
                if (res.Status) {
                    window.location.href = '/CheckOut/ShippingMethod'
                } else {
                    window.location.href = '/Cart/Index'
                }
            }
        });
}
                                                    </script>
                                                </div>
                                            </div>
                                        }
                                        <div class="add-button">
                                            <div class="btn-holder">
                                                <label class="button-1 open-address-form"><span>Add new</span></label>
                                                <label class="button-2 close-address-form"><span>Close</span></label>
                                            </div>
                                            @using (Html.BeginForm("BillingAddress", "CheckOut", FormMethod.Post))
                                            {
                                                <div class="enter-address">
                                                    <input type="hidden" data-val="true" data-val-required="The Id field is required." id="BillingNewAddress_Id" name="BillingNewAddress.Id" value="0">
                                                    @Html.AntiForgeryToken()
                                                    @Html.ValidationSummary(true, "", new { @class = "message-error" })
                                                    <div class="edit-address">
                                                        <div class="inputs">
                                                            <label for="Address_FirstName">First name:</label>
                                                            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                                            <span class="required">*</span>
                                                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                                        </div>
                                                        <div class="inputs">
                                                            <label for="Address_LastName">Last name:</label>
                                                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                                            <span class="required">*</span>
                                                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                                        </div>
                                                        <div class="inputs">
                                                            <label for="Address_Email">Email:</label>
                                                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                                            <span class="required">*</span>
                                                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                                        </div>
                                                        <div class="inputs">
                                                            <label for="Address_Company">Company:</label>
                                                            @Html.EditorFor(model => model.Company, new { htmlAttributes = new { @class = "form-control" } })
                                                            @Html.ValidationMessageFor(model => model.Company, "", new { @class = "text-danger" })
                                                        </div>
                                                        <div class="inputs">
                                                            <label for="Address_City">City:</label>
                                                            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                                                            <span class="required">*</span>
                                                            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                                                        </div>
                                                        <div class="inputs">
                                                            <label for="Address_Address1">Address 1:</label>
                                                            @Html.EditorFor(model => model.Address1, new { htmlAttributes = new { @class = "form-control" } })
                                                            <span class="required">*</span>
                                                            @Html.ValidationMessageFor(model => model.Address1, "", new { @class = "text-danger" })
                                                        </div>
                                                        <div class="inputs">
                                                            <label for="Address_Address2">Address 2:</label>
                                                            @Html.EditorFor(model => model.Address2, new { htmlAttributes = new { @class = "form-control" } })
                                                            @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "text-danger" })
                                                        </div>
                                                        <div class="inputs">
                                                            <label for="Address_ZipPostalCode">Zip / postal code:</label>
                                                            @Html.EditorFor(model => model.ZipPostalCode, new { htmlAttributes = new { @class = "form-control" } })
                                                            <span class="required">*</span>
                                                            @Html.ValidationMessageFor(model => model.ZipPostalCode, "", new { @class = "text-danger" })
                                                        </div>
                                                        <div class="inputs">
                                                            <label for="Address_PhoneNumber">Phone number:</label>
                                                            @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                                                            <span class="required">*</span>
                                                            @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                                                        </div>
                                                        <div class="inputs">
                                                            <label for="Address_FaxNumber">Fax number:</label>
                                                            @Html.EditorFor(model => model.FaxNumber, new { htmlAttributes = new { @class = "form-control" } })
                                                            @Html.ValidationMessageFor(model => model.FaxNumber, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                    <div class="buttons">
                                                        <input type="submit" name="nextstep" value="Next" class="button-1 new-address-next-step-button">
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="add-button">
                                            <div class="btn-holder">
                                                <label class="button-1 open-address-form"><span>Add new</span></label>
                                                <label class="button-2 close-address-form"><span>Close</span></label>
                                            </div>
                                            @using (Html.BeginForm("BillingAddress", "CheckOut", FormMethod.Post))
                                            {
                                                <div class="enter-address">
                                                    <input type="hidden" data-val="true" data-val-required="The Id field is required." id="BillingNewAddress_Id" name="BillingNewAddress.Id" value="0">
                                                    @Html.AntiForgeryToken()
                                                    @Html.ValidationSummary(true, "", new { @class = "message-error" })
                                                    <div class="edit-address">
                                                        <div class="inputs">
                                                            <label for="Address_FirstName">First name:</label>
                                                            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                                            <span class="required">*</span>
                                                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                                        </div>
                                                        <div class="inputs">
                                                            <label for="Address_LastName">Last name:</label>
                                                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                                            <span class="required">*</span>
                                                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                                        </div>
                                                        <div class="inputs">
                                                            <label for="Address_Email">Email:</label>
                                                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                                            <span class="required">*</span>
                                                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                                        </div>
                                                        <div class="inputs">
                                                            <label for="Address_Company">Company:</label>
                                                            @Html.EditorFor(model => model.Company, new { htmlAttributes = new { @class = "form-control" } })
                                                            @Html.ValidationMessageFor(model => model.Company, "", new { @class = "text-danger" })
                                                        </div>
                                                        <div class="inputs">
                                                            <label for="Address_City">City:</label>
                                                            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                                                            <span class="required">*</span>
                                                            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                                                        </div>
                                                        <div class="inputs">
                                                            <label for="Address_Address1">Address 1:</label>
                                                            @Html.EditorFor(model => model.Address1, new { htmlAttributes = new { @class = "form-control" } })
                                                            <span class="required">*</span>
                                                            @Html.ValidationMessageFor(model => model.Address1, "", new { @class = "text-danger" })
                                                        </div>
                                                        <div class="inputs">
                                                            <label for="Address_Address2">Address 2:</label>
                                                            @Html.EditorFor(model => model.Address2, new { htmlAttributes = new { @class = "form-control" } })
                                                            @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "text-danger" })
                                                        </div>
                                                        <div class="inputs">
                                                            <label for="Address_ZipPostalCode">Zip / postal code:</label>
                                                            @Html.EditorFor(model => model.ZipPostalCode, new { htmlAttributes = new { @class = "form-control" } })
                                                            <span class="required">*</span>
                                                            @Html.ValidationMessageFor(model => model.ZipPostalCode, "", new { @class = "text-danger" })
                                                        </div>
                                                        <div class="inputs">
                                                            <label for="Address_PhoneNumber">Phone number:</label>
                                                            @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                                                            <span class="required">*</span>
                                                            @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                                                        </div>
                                                        <div class="inputs">
                                                            <label for="Address_FaxNumber">Fax number:</label>
                                                            @Html.EditorFor(model => model.FaxNumber, new { htmlAttributes = new { @class = "form-control" } })
                                                            @Html.ValidationMessageFor(model => model.FaxNumber, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                    <div class="buttons">
                                                        <input type="submit" name="nextstep" value="Next" class="button-1 new-address-next-step-button">
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        <input name="ShipToSameAddress" type="hidden" value="false">
                    }

                    <div class="section order-summary">
                        <div class="title">
                            <strong>Order summary</strong>
                        </div>
                        <div class="order-summary-content">
                            <form method="post" enctype="multipart/form-data" id="shopping-cart-form" action="/cart">
                                <div class="table-wrapper">
                                    <table class="cart">
                                        <colgroup>
                                            <col width="1">
                                            <col>
                                            <col width="1">
                                            <col width="1">
                                            <col width="1">
                                        </colgroup>
                                        <thead>
                                            <tr class="cart-header-row">
                                                <th class="product-picture">
                                                    Image
                                                </th>
                                                <th class="product" data-hide="w410, w480, w580, w768">
                                                    Product(s)
                                                </th>
                                                <th class="unit-price" data-hide="w410, w480">
                                                    Price
                                                </th>
                                                <th class="quantity">
                                                    Qty
                                                </th>
                                                <th class="subtotal">
                                                    Total
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (Session[OnlineShop.Common.CommonConstants.USER_SESSION] != null)
                                            {
                                                var customerSession = (OnlineShop.Common.UserLogin)Session[OnlineShop.Common.CommonConstants.USER_SESSION];
                                                var customer = new Models.Dao.CustomerDao().GetCustomerById(Convert.ToInt32(customerSession.UserId));

                                                foreach (var item in customer.ShoppingCartItems.Where(x => x.ShoppingCartTypeId == 1))
                                                {
                                                    Total += item.Product.Price * item.Quantity;
                                                    var price = item.Product.Price * item.Quantity;
                                                    var productPictures = new Models.Dao.PictureDao().GetPicturesByProductId(item.Product.Id, 1);
                                                    <tr class="cart-item-row">
                                                        @if (productPictures.Count() > 0)
                                                        {
                                                            var url = new Models.Dao.PictureDao().GetPictureUrl(productPictures.SingleOrDefault().Id, 200, true, null, Models.Dao.PictureType.Entity);
                                                            <td class="product-picture">
                                                                <a href="/product/@item.Product.Name.ToLower().Replace(" ","-")">
                                                                    <img src="@url" data-lazyloadsrc="@url" alt="Picture of Droid Inventor Kit" title="@productPictures.SingleOrDefault().TitleAttribute" loadedimage="true">
                                                                </a>
                                                            </td>
                                                        }
                                                        else
                                                        {
                                                            var url = new Models.Dao.PictureDao().GetDefaultPictureUrl(200, Models.Dao.PictureType.Entity, null);
                                                            <td class="product-picture">
                                                                <a href="/product/@item.Product.Name.ToLower().Replace(" ","-")">
                                                                    <img src="@url" data-lazyloadsrc="@url" alt="Picture of Droid Inventor Kit" title="" loadedimage="true">
                                                                </a>
                                                            </td>
                                                        }
                                                        <td class="product">
                                                            <a href="/product/@item.Product.Name.ToLower().Replace(" ","-")" class="product-name">@item.Product.Name</a>
                                                        </td>
                                                        <td class="unit-price">
                                                            <label class="td-title">Price:</label>
                                                            <span class="product-unit-price">@item.Product.Price</span>
                                                        </td>
                                                        <td class="quantity">
                                                            <label class="td-title" for="itemquantity6982">Qty:</label>
                                                            <span class="product-quantity">@item.Quantity</span>
                                                        </td>
                                                        <td class="subtotal">
                                                            <label class="td-title">Total:</label>
                                                            <span class="product-subtotal">@price</span>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                            else
                                            {
                                                var shoppingCart = Session[OnlineShop.Common.CommonConstants.ShoppingCartSession];
                                                var listShoppingCart = new List<OnlineShop.Models.ShoppingCartItemModel>();

                                                if (shoppingCart != null)
                                                {
                                                    listShoppingCart = (List<OnlineShop.Models.ShoppingCartItemModel>)shoppingCart;
                                                }
                                                foreach (var item in listShoppingCart.Where(x => x.ShoppingCartTypeId == 1))
                                                {
                                                    Total += item.Product.Price * item.Quantity;
                                                    var price = item.Product.Price * item.Quantity;
                                                    var productPictures = new Models.Dao.PictureDao().GetPicturesByProductId(item.Product.Id, 1);
                                                    <tr class="cart-item-row">
                                                        @if (productPictures.Count() > 0)
                                                        {
                                                            var url = new Models.Dao.PictureDao().GetPictureUrl(productPictures.SingleOrDefault().Id, 200, true, null, Models.Dao.PictureType.Entity);
                                                            <td class="product-picture">
                                                                <a href="/product/@item.Product.Name.ToLower().Replace(" ","-")">
                                                                    <img src="@url" data-lazyloadsrc="@url" alt="Picture of Droid Inventor Kit" title="@productPictures.SingleOrDefault().TitleAttribute" loadedimage="true">
                                                                </a>
                                                            </td>
                                                        }
                                                        else
                                                        {
                                                            var url = new Models.Dao.PictureDao().GetDefaultPictureUrl(200, Models.Dao.PictureType.Entity, null);
                                                            <td class="product-picture">
                                                                <a href="/product/@item.Product.Name.ToLower().Replace(" ","-")">
                                                                    <img src="@url" data-lazyloadsrc="@url" alt="Picture of Droid Inventor Kit" title="" loadedimage="true">
                                                                </a>
                                                            </td>
                                                        }
                                                        <td class="product">
                                                            <a href="/product/@item.Product.Name.ToLower().Replace(" ","-")" class="product-name">@item.Product.Name</a>
                                                        </td>
                                                        <td class="unit-price">
                                                            <label class="td-title">Price:</label>
                                                            <span class="product-unit-price">@item.Product.Price</span>
                                                        </td>
                                                        <td class="quantity">
                                                            <label class="td-title" for="itemquantity6982">Qty:</label>
                                                            <span class="product-quantity">@item.Quantity</span>
                                                        </td>
                                                        <td class="subtotal">
                                                            <label class="td-title">Total:</label>
                                                            <span class="product-subtotal">@price</span>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                                <div class="cart-footer">
                                    <div class="cart-options">
                                    </div>
                                    <div class="totals">
                                        <div class="total-info">
                                            <table class="cart-total">
                                                <tbody>
                                                    <tr class="order-subtotal">
                                                        <td class="cart-total-left">
                                                            <label>Total:</label>
                                                        </td>
                                                        <td class="cart-total-right">
                                                            <span class="value-summary">@Total</span>
                                                        </td>
                                                    </tr>
                                                    <tr class="shipping-cost">
                                                        <td class="cart-total-left">
                                                            <label>Shipping:</label>
                                                        </td>
                                                        <td class="cart-total-right">
                                                            <span class="value-summary">$0.00</span>
                                                        </td>
                                                    </tr>
                                                    <tr class="tax-value">
                                                        <td class="cart-total-left">
                                                            <label>Tax:</label>
                                                        </td>
                                                        <td class="cart-total-right">
                                                            <span class="value-summary">$0.00</span>
                                                        </td>
                                                    </tr>
                                                    <tr class="order-total">
                                                        <td class="cart-total-left">
                                                            <label>Total:</label>
                                                        </td>
                                                        <td class="cart-total-right">
                                                            <span class="value-summary"><strong>@Total</strong></span>
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
