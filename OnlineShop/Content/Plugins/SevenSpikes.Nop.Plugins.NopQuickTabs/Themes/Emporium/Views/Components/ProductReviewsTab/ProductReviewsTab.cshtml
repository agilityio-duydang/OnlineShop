@using System.Globalization
@model Nop.Web.Models.Catalog.ProductReviewsModel
@{
    var reviewsRatingSum = Model.Items.Sum(pr => pr.Rating);
    var reviewsRatingPercent = 0;

    if (Model.Items.Count != 0)
    {
        reviewsRatingPercent = ((reviewsRatingSum * 100) / Model.Items.Count) / 5;
    }

    var ratingValue = reviewsRatingPercent / (decimal)20;
}
<div id="updateTargetId" class="product-reviews-page">
    @if (Model.AddProductReview.SuccessfullyAdded)
    {
        <div class="submitReviewResult">
            @Model.AddProductReview.Result
        </div>
    }
    else
    {
        <div class="write-review" id="review-form">
            <div class="product-review-links">
                @Model.Items.Count
                @T("Reviews.Overview.Reviews")
            </div>
            @*hidden microdata info*@
            @{
                <span itemprop="ratingValue" style="display: none;">@ratingValue.ToString("0.0", new CultureInfo("en-US"))</span>
                <span itemprop="reviewCount" style="display: none;">@Model.Items.Count</span>
            }
            <div class="product-review-box">
                <div class="rating">
                    <div style="width: @(reviewsRatingPercent)%">
                    </div>
                </div>
            </div>
            <div class="title">
                <strong class="write-review-title"><span>@T("Reviews.Write")</span></strong>
                <strong class="close-review-form"><span>@T("SevenSpikes.Themes.Emporium.Common.Close")</span></strong>
            </div>
            <div class="write-review-collapse">
                    <div asp-validation-summary="ModelOnly" class="message-error"></div>
                    <div class="form-fields">
                        <div class="inputs">
                            <label asp-for="AddProductReview.Title" asp-postfix=":"></label>
                            <input asp-for="AddProductReview.Title" class="review-title" asp-disabled="@(!Model.AddProductReview.CanCurrentCustomerLeaveReview)" />
                            <nop-required />
                            <span asp-validation-for="AddProductReview.Title"></span>
                        </div>
                        <div class="inputs">
                            <label asp-for="AddProductReview.ReviewText" asp-postfix=":"></label>
                            <textarea asp-for="AddProductReview.ReviewText" class="review-text" asp-disabled="@(!Model.AddProductReview.CanCurrentCustomerLeaveReview)"></textarea>
                            <nop-required />
                            <span asp-validation-for="AddProductReview.ReviewText"></span>
                        </div>
                        <div class="review-rating">
                            <label asp-for="AddProductReview.Rating" asp-postfix=":"></label>
                            <ul>
                                <li class="label first">@T("Reviews.Fields.Rating.Bad")</li>
                                <li class="rating-options">
                                    <input asp-for="AddProductReview.Rating" value="1" type="radio" id="addproductrating_1" />
                                    <label for="addproductrating_1">1</label>
                                    <input asp-for="AddProductReview.Rating" value="2" type="radio" id="addproductrating_2" />
                                    <label for="addproductrating_2">2</label>
                                    <input asp-for="AddProductReview.Rating" value="3" type="radio" id="addproductrating_3" />
                                    <label for="addproductrating_3">3</label>
                                    <input asp-for="AddProductReview.Rating" value="4" type="radio" id="addproductrating_4" />
                                    <label for="addproductrating_4">4</label>
                                    <input asp-for="AddProductReview.Rating" value="5" type="radio" id="addproductrating_5" />
                                    <label for="addproductrating_5">5</label>
                                </li>
                                <li class="label last">@T("Reviews.Fields.Rating.Excellent")</li>
                            </ul>
                        </div>
                        @*@if (Model.AddProductReview.DisplayCaptcha)
                    {
                        <div class="captcha-box">
                             <nop-captcha />
                        </div>
                    }*@
                    </div>
                    <div class="buttons">
                        @if (Model.AddProductReview.CanCurrentCustomerLeaveReview)
                        {
                        <input type="button" id="add-review" name="add-review" class="button-1 write-product-review-button" value="@T("Reviews.SubmitButton")" />
                        }
                        else
                        {
                            <input type="button" id="add-review" disabled="disabled" name="add-review" class="button-1 write-product-review-button" value="@T("Reviews.SubmitButton")" />
                        }
                    </div>
            </div>
        </div>
    }
    @if (Model.Items.Count > 0)
    {
        <div class="product-review-list">
            @foreach (var review in Model.Items)
            {
                var ratingPercent = review.Rating * 20;

                <div class="product-review-item">
                    <div class="review-info">
                        <div class="product-review-box">
                            <div class="rating">
                                <div style="width: @(ratingPercent)%">
                                </div>
                            </div>

                        </div>
                        <span class="user">
                            <label>@T("Reviews.From"):</label>
                            @if (review.AllowViewingProfiles)
                            {
                                <a href="@Url.RouteUrl("CustomerProfile", new { id = review.CustomerId })">@(review.CustomerName)</a>
                            }
                            else
                            {
                                @review.CustomerName
                            }
                        </span>
                        <span class="separator">|</span>

                        <span class="date">
                            <label>@T("Reviews.Date"):</label>
                            <span>@review.WrittenOnStr</span>
                        </span>
                    </div>
                    <div class="review-body">
                        <div class="review-item-head">
                            <div class="review-title">
                                <strong>@review.Title</strong>
                            </div>
                        </div>
                        <div class="review-text">
                            @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(review.ReviewText, false, true, false, false, false, false))
                        </div>
                        @if (!string.IsNullOrEmpty(review.ReplyText))
                        {
                            <div class="reply">
                                <div class="reply-header">
                                    @T("Reviews.Reply")
                                </div>
                                <div class="reply-text">
                                    @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(review.ReplyText, false, true, false, false, false, false))
                                </div>
                            </div>
                        }
                    </div>
                    @await Component.InvokeAsync(Components.ProductReviewHelpfulnessTab, review.Helpfulness)
                    @await Component.InvokeAsync("Widget", new { widgetZone = "productreviews_page_inside_review", additionalData = review.Id })
                </div>
            }
        </div>
    }
</div>


