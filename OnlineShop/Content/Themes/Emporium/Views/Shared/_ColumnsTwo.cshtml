@using Nop.Core
@using Nop.Services.Configuration

@inject IStoreContext storeContext
@inject ISettingService settingService

@{
    Layout = "_Root";

    var controllerName = Url.ActionContext.RouteData.Values["controller"].ToString();
    var actionName = Url.ActionContext.RouteData.Values["action"].ToString();

    //current category ID
    var currentCategoryId = 0;
    if (controllerName.Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
    }


    //current manufacturer ID
    var currentManufacturerId = 0;
    if (controllerName.Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.ActionContext.RouteData.Values["manufacturerId"].ToString());
    }

    //current product ID
    var currentProductId = 0;
    if (controllerName.Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.ActionContext.RouteData.Values["productId"].ToString());
    }

    //title
    Html.AddTitleParts(T("PageTitle.Account").Text);

    var storeId = storeContext.CurrentStore.Id;
    string gridNuberOfItemsClass = settingService.GetSettingByKey("prismathemesettings.categorygriditemsnumber", "three-per-row", storeId, true);

    var isAccountPage = (controllerName.Equals("customer", StringComparison.InvariantCultureIgnoreCase) && (
        actionName.Equals("info", StringComparison.InvariantCultureIgnoreCase) ||
        actionName.Equals("addresses", StringComparison.InvariantCultureIgnoreCase) ||
        actionName.Equals("addressadd", StringComparison.InvariantCultureIgnoreCase) ||
        actionName.Equals("addressedit", StringComparison.InvariantCultureIgnoreCase) ||
        actionName.Equals("downloadableproducts", StringComparison.InvariantCultureIgnoreCase) ||
        actionName.Equals("changepassword", StringComparison.InvariantCultureIgnoreCase) ||
        actionName.Equals("avatar", StringComparison.InvariantCultureIgnoreCase))) ||
        actionName.Equals("customerproductreviews", StringComparison.InvariantCultureIgnoreCase) ||
        controllerName.Equals("helpdesk", StringComparison.InvariantCultureIgnoreCase) ||
        controllerName.Equals("vendor", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("info", StringComparison.InvariantCultureIgnoreCase) ||
        (controllerName.Equals("backinstocksubscription", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("customersubscriptions", StringComparison.InvariantCultureIgnoreCase)) ||
        (controllerName.Equals("order", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("customerorders", StringComparison.InvariantCultureIgnoreCase)) ||
        (controllerName.Equals("order", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("customerrewardpoints", StringComparison.InvariantCultureIgnoreCase)) ||
        (controllerName.Equals("boards", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("customerforumsubscriptions", StringComparison.InvariantCultureIgnoreCase)) ||
        (controllerName.Equals("returnrequest", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("customerreturnrequests", StringComparison.InvariantCultureIgnoreCase));
}

@if (IsSectionDefined("Breadcrumb"))
{
    @section Breadcrumb {
        @RenderSection("Breadcrumb")
    }
}
@if (!isAccountPage)
{
    <div class="center-2">
        @await Component.InvokeAsync("Widget", new { widgetZone = "main_column_before" })
        @RenderBody()
        @await Component.InvokeAsync("Widget", new { widgetZone = "main_column_after" })
    </div>
    <div class="side-2">
        @if (IsSectionDefined("left"))
        {
            @RenderSection("left")
        }
        else
        {
            @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_before" })
            <div class="block-wrapper">
                @await Component.InvokeAsync("CategoryNavigation", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
                @*@await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_after_category_navigation" })*@
                @await Component.InvokeAsync("ManufacturerNavigation", new { currentManufacturerId = currentManufacturerId })
                @await Component.InvokeAsync("VendorNavigation")
                @await Component.InvokeAsync("RecentlyViewedProductsBlock", new { productThumbPictureSize = 80 })
                @await Component.InvokeAsync("PopularProductTags")
                @await Component.InvokeAsync("PollBlock", new { systemKeyword = "LeftColumnPoll" })
            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = "left_side_column_after" })
        }
    </div>
}
else
{
    @if (IsSectionDefined("accountPageTitle"))
    {
        @RenderSection("accountPageTitle")
    }

    <div class="side-2">
        @if (IsSectionDefined("left"))
        {
            @RenderSection("left")
        }
    </div>
    <div class="center-2">
        @await Component.InvokeAsync("Widget", new { widgetZone = "main_column_before" })
        @RenderBody()
        @await Component.InvokeAsync("Widget", new { widgetZone = "main_column_after" })
    </div>
}